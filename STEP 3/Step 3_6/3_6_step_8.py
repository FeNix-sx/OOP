"""
Подвиг 7. Объявите класс с именем DataBase (база данных - БД), объекты которого создаются командой:

db = DataBase(path)
где path - путь к файлу с данными БД (строка).

Также в классе DataBase нужно объявить следующие методы:

write(self, record) - для добавления новой записи в БД, представленной объектом record;
read(self, pk) - чтение записи из БД (возвращает объект Record) по ее уникальному идентификатору pk (уникальное целое положительное число); запись ищется в значениях словаря (см. ниже)

Каждая запись БД должна описываться классом Record, а объекты этого класса создаваться командой:

record = Record(fio, descr, old)
где fio - ФИО некоторого человека (строка); descr - характеристика человека (строка); old - возраст человека (целое число).

В каждом объекте класса Record должны формироваться следующие локальные атрибуты:

pk - уникальный идентификатор записи (число: целое, положительное); формируется автоматически при создании каждого нового объекта;
fio - ФИО человека (строка);
descr - характеристика человека (строка);
old - возраст человека (целое число).

Реализовать для объектов класса Record вычисление хэша по атрибутам: fio и old (без учета регистра). Если они одинаковы для разных записей, то и хэши должны получаться равными. Также для объектов класса Record  с одинаковыми хэшами оператор == должен выдавать значение True, а с разными хэшами - False.

Хранить записи в БД следует в виде словаря dict_db (атрибут объекта db класса DataBase), ключами которого являются объекты класса Record, а значениями список из объектов с равными хэшами:

dict_db[rec1] = [rec1, rec2, ..., recN]

где rec1, rec2, ..., recN - объекты класса Record с одинаковыми хэшами.

Для наполнения БД прочитайте строки из входного потока с помощью команды:

lst_in = list(map(str.strip, sys.stdin.readlines()))
где каждая строка представлена в формате:

"ФИО; характеристика; возраст"

Например:

Балакирев С.М.; программист; 33
Кузнецов А.В.; разведчик-нелегал; 35
Суворов А.В.; полководец; 42
Иванов И.И.; фигурант всех подобных списков; 26
Балакирев С.М.; преподаватель; 37

Каждая строка должна быть представлена объектом класса Record и записана в БД db (в словарь db.dict_db).

P.S. На экран ничего выводить не нужно.

Sample Input:

Балакирев С.М.; программист; 33
Кузнецов Н.И.; разведчик-нелегал; 35
Суворов А.В.; полководец; 42
Иванов И.И.; фигурант всех подобных списков; 26
Балакирев С.М.; преподаватель; 33
"""
class Record:
    __personal_key = 0

    @classmethod
    def __pk(cls):
        cls.__personal_key += 1
        return cls.__personal_key

    def __init__(self, fio: str=None, descr: str=None, old: int=0):
        self.fio = fio
        self.descr = descr
        self.old = old
        self.pk = self.__pk()

    def __hash__(self):
        return hash((self.fio, self.old))

    def __eq__(self, other):
        """равно"""
        if isinstance(other, Record):
            return hash(self) == hash(other)
        raise TypeError("тип должен быть Record")


class DataBase:
    def __init__(self, path):
        self.__path = path
        self.dict_db = dict()

    def write(self, record):
        """добавление новой записи в БД, представленной объектом record"""
        if isinstance(record, Record):
            self.dict_db[record] = self.dict_db.setdefault(record,[]) + [record]
        else:
            raise TypeError("тип данных должен быть Record")

    def read(self, pk):
        """чтение записи из БД (возвращает объект Record) по ее уникальному
        идентификатору pk (уникальное целое положительное число); запись ищется в значениях словаря"""
        for key in self.dict_db.keys():
            for itm in self.dict_db[key]:
                if itm.pk == pk:
                    return itm


lst_in = ['Балакирев С.М.; программист; 33',
          'Кузнецов Н.И.; разведчик-нелегал; 35',
          'Суворов А.В.; полководец; 42',
          'Иванов И.И.; фигурант всех подобных списков; 26',
          'Балакирев С.М.; преподаватель; 33'
          ]

db = DataBase("12121")

for str_item in lst_in:
    fio, descr, old = str_item.split(";")
    db.write(Record(fio, descr, int(old)))


db22345 = DataBase('123')
r1 = Record('fio', 'descr', 10)
r2 = Record('fio', 'descr', 10)
print(db.read(3))